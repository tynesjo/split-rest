xkb_keymap {

    xkb_keycodes "evdev+aliases(qwerty)" {
        minimum = 8;
        maximum = 255;
         <ESC> = 9;
        <AE01> = 10;
        <AE02> = 11;
        <AE03> = 12;
        <AE04> = 13;
        <AE05> = 14;
        <AE06> = 15;
        <AE07> = 16;
        <AE08> = 17;
        <AE09> = 18;
        <AE10> = 19;
        <AE11> = 20;
        <AE12> = 21;
        <BKSP> = 22;
         <TAB> = 23;
        <AD01> = 24;
        <AD02> = 25;
        <AD03> = 26;
        <AD04> = 27;
        <AD05> = 28;
        <AD06> = 29;
        <AD07> = 30;
        <AD08> = 31;
        <AD09> = 32;
        <AD10> = 33;
        <AD11> = 34;
        <AD12> = 35;
        <RTRN> = 36;
        <LCTL> = 37;
        <AC01> = 38;
        <AC02> = 39;
        <AC03> = 40;
        <AC04> = 41;
        <AC05> = 42;
        <AC06> = 43;
        <AC07> = 44;
        <AC08> = 45;
        <AC09> = 46;
        <AC10> = 47;
        <AC11> = 48;
        <TLDE> = 49;
        <LFSH> = 50;
        <BKSL> = 51;
        <AB01> = 52;
        <AB02> = 53;
        <AB03> = 54;
        <AB04> = 55;
        <AB05> = 56;
        <AB06> = 57;
        <AB07> = 58;
        <AB08> = 59;
        <AB09> = 60;
        <AB10> = 61;
        <RTSH> = 62;
        <KPMU> = 63;
        <LALT> = 64;
        <SPCE> = 65;
        <CAPS> = 66;
        <FK01> = 67;
        <FK02> = 68;
        <FK03> = 69;
        <FK04> = 70;
        <FK05> = 71;
        <FK06> = 72;
        <FK07> = 73;
        <FK08> = 74;
        <FK09> = 75;
        <FK10> = 76;
        <NMLK> = 77;
        <SCLK> = 78;
         <KP7> = 79;
         <KP8> = 80;
         <KP9> = 81;
        <KPSU> = 82;
         <KP4> = 83;
         <KP5> = 84;
         <KP6> = 85;
        <KPAD> = 86;
         <KP1> = 87;
         <KP2> = 88;
         <KP3> = 89;
         <KP0> = 90;
        <KPDL> = 91;
        <LVL3> = 92;
        <LSGT> = 94;
        <FK11> = 95;
        <FK12> = 96;
        <AB11> = 97;
        <KATA> = 98;
        <HIRA> = 99;
        <HENK> = 100;
        <HKTG> = 101;
        <MUHE> = 102;
        <JPCM> = 103;
        <KPEN> = 104;
        <RCTL> = 105;
        <KPDV> = 106;
        <PRSC> = 107;
        <RALT> = 108;
        <LNFD> = 109;
        <HOME> = 110;
          <UP> = 111;
        <PGUP> = 112;
        <LEFT> = 113;
        <RGHT> = 114;
         <END> = 115;
        <DOWN> = 116;
        <PGDN> = 117;
         <INS> = 118;
        <DELE> = 119;
        <I120> = 120;
        <MUTE> = 121;
        <VOL-> = 122;
        <VOL+> = 123;
        <POWR> = 124;
        <KPEQ> = 125;
        <I126> = 126;
        <PAUS> = 127;
        <I128> = 128;
        <I129> = 129;
        <HNGL> = 130;
        <HJCV> = 131;
        <AE13> = 132;
        <LWIN> = 133;
        <RWIN> = 134;
        <COMP> = 135;
        <STOP> = 136;
        <AGAI> = 137;
        <PROP> = 138;
        <UNDO> = 139;
        <FRNT> = 140;
        <COPY> = 141;
        <OPEN> = 142;
        <PAST> = 143;
        <FIND> = 144;
         <CUT> = 145;
        <HELP> = 146;
        <I147> = 147;
        <I148> = 148;
        <I149> = 149;
        <I150> = 150;
        <I151> = 151;
        <I152> = 152;
        <I153> = 153;
        <I154> = 154;
        <I155> = 155;
        <I156> = 156;
        <I157> = 157;
        <I158> = 158;
        <I159> = 159;
        <I160> = 160;
        <I161> = 161;
        <I162> = 162;
        <I163> = 163;
        <I164> = 164;
        <I165> = 165;
        <I166> = 166;
        <I167> = 167;
        <I168> = 168;
        <I169> = 169;
        <I170> = 170;
        <I171> = 171;
        <I172> = 172;
        <I173> = 173;
        <I174> = 174;
        <I175> = 175;
        <I176> = 176;
        <I177> = 177;
        <I178> = 178;
        <I179> = 179;
        <I180> = 180;
        <I181> = 181;
        <I182> = 182;
        <I183> = 183;
        <I184> = 184;
        <I185> = 185;
        <I186> = 186;
        <I187> = 187;
        <I188> = 188;
        <I189> = 189;
        <I190> = 190;
        <FK13> = 191;
        <FK14> = 192;
        <FK15> = 193;
        <FK16> = 194;
        <FK17> = 195;
        <FK18> = 196;
        <FK19> = 197;
        <FK20> = 198;
        <FK21> = 199;
        <FK22> = 200;
        <FK23> = 201;
        <FK24> = 202;
        <MDSW> = 203;
         <ALT> = 204;
        <META> = 205;
        <SUPR> = 206;
        <HYPR> = 207;
        <I208> = 208;
        <I209> = 209;
        <I210> = 210;
        <I211> = 211;
        <I212> = 212;
        <I213> = 213;
        <I214> = 214;
        <I215> = 215;
        <I216> = 216;
        <I217> = 217;
        <I218> = 218;
        <I219> = 219;
        <I220> = 220;
        <I221> = 221;
        <I222> = 222;
        <I223> = 223;
        <I224> = 224;
        <I225> = 225;
        <I226> = 226;
        <I227> = 227;
        <I228> = 228;
        <I229> = 229;
        <I230> = 230;
        <I231> = 231;
        <I232> = 232;
        <I233> = 233;
        <I234> = 234;
        <I235> = 235;
        <I236> = 236;
        <I237> = 237;
        <I238> = 238;
        <I239> = 239;
        <I240> = 240;
        <I241> = 241;
        <I242> = 242;
        <I243> = 243;
        <I244> = 244;
        <I245> = 245;
        <I246> = 246;
        <I247> = 247;
        <I248> = 248;
        <I249> = 249;
        <I250> = 250;
        <I251> = 251;
        <I252> = 252;
        <I253> = 253;
        <I254> = 254;
        <I255> = 255;
        indicator 1 = "Caps Lock";
        indicator 2 = "Num Lock";
        indicator 3 = "Scroll Lock";
        indicator 4 = "Compose";
        indicator 5 = "Kana";
        indicator 6 = "Sleep";
        indicator 7 = "Suspend";
        indicator 8 = "Mute";
        indicator 9 = "Misc";
        indicator 10 = "Mail";
        indicator 11 = "Charging";
        virtual indicator 12 = "Shift Lock";
        virtual indicator 13 = "Group 2";
        virtual indicator 14 = "Mouse Keys";
        alias <AC12> = <BKSL>;
        alias <MENU> = <COMP>;
        alias <HZTG> = <TLDE>;
        alias <LMTA> = <LWIN>;
        alias <RMTA> = <RWIN>;
        alias <ALGR> = <RALT>;
        alias <KPPT> = <I129>;
    };
    
    xkb_compatibility "complete" {
    
        virtual_modifiers NumLock,Alt,LevelThree,LAlt,RAlt,RControl,LControl,ScrollLock,LevelFive,AltGr,Meta,Super,Hyper;
    
        interpret.useModMapMods= AnyLevel;
        interpret.repeat= False;
        interpret.locking= False;

#        interpret ISO_Level2_Latch+Exactly(Shift) {
#            useModMapMods=level1;
#            action= LatchMods(modifiers=Shift,clearLocks,latchToLock);
#        };

        interpret ISO_Level3_Shift+AnyOf(all) {
            virtualModifier= LevelThree;
            useModMapMods=level1;
            action= SetMods(modifiers=LevelThree,clearLocks);
        };


        interpret Alt_L+AnyOf(all) {
            useModMapMods=level1;
            action = SetMods(modifiers=Mod1,clearLocks); 
        };
        interpret Alt_R+AnyOf(all) {
            useModMapMods=level1;
            action = SetMods(modifiers=Mod1,clearLocks); 
        };


        # Meta

        interpret Meta_L+AnyOf(all) {
            virtualModifier=LevelFive;
            action= SetMods(modifiers=modMapMods,clearLocks);
        };
#        interpret Meta_R+AnyOf(all) {
#            virtualModifier= Meta;
#            action= SetMods(modifiers=modMapMods,clearLocks);
#        };
#        interpret Meta_L+AnyOfOrNone(all) {
#            action= SetMods(modifiers=Lock,clearLocks);
#        };
#        interpret Meta_R+AnyOfOrNone(all) {
#            action= SetMods(modifiers=Mod2,clearLocks);
#        };



        interpret Super_L+AnyOf(all) {
            virtualModifier= Super;
            action= SetMods(modifiers=modMapMods,clearLocks);
        };
        interpret Super_R+AnyOf(all) {
            virtualModifier= Super;
            action= SetMods(modifiers=modMapMods,clearLocks);
        };

        interpret Hyper_L+AnyOf(all) {
            virtualModifier= Hyper;
            action= SetMods(modifiers=modMapMods,clearLocks);
        };
        interpret Hyper_R+AnyOf(all) {
            virtualModifier= Meta;
            action= SetMods(modifiers=modMapMods,clearLocks);
        };



        #interpret Scroll_Lock+AnyOf(all) {
        #    virtualModifier= ScrollLock;
        #    action= LockMods(modifiers=modMapMods);
        #};

        interpret ISO_Level5_Shift+AnyOf(all) {
            virtualModifier= LevelThree;
            useModMapMods=level1;
            action= SetMods(modifiers=LevelThree,clearLocks);
        };

#        interpret ISO_Level5_Latch+AnyOf(all) {
#            virtualModifier= LevelThree;
#            useModMapMods=level1;
#            action= LatchMods(modifiers=LevelThree,clearLocks,latchToLock);
#        };
#        interpret ISO_Level5_Lock+AnyOf(all) {
#            virtualModifier= LevelThree;
#            useModMapMods=level1;
#            action= LockMods(modifiers=LevelThree);
#        };
#        interpret Mode_switch+AnyOfOrNone(all) {
#            virtualModifier= AltGr;
#            useModMapMods=level1;
#            action= SetGroup(group=+1);
#        };
        interpret ISO_Level3_Shift+AnyOfOrNone(all) {
            action= SetMods(modifiers=LevelThree,clearLocks);
        };


#        interpret ISO_Group_Latch+AnyOfOrNone(all) {
#            virtualModifier= AltGr;
#            useModMapMods=level1;
#            action= LatchGroup(group=2);
#        };
#        interpret ISO_Next_Group+AnyOfOrNone(all) {
#            virtualModifier= AltGr;
#            useModMapMods=level1;
#            action= LockGroup(group=+1);
#        };
#        interpret ISO_Prev_Group+AnyOfOrNone(all) {
#            virtualModifier= AltGr;
#            useModMapMods=level1;
#            action= LockGroup(group=-1);
#        };
#        interpret ISO_First_Group+AnyOfOrNone(all) {
#            action= LockGroup(group=1);
#        };
#        interpret ISO_Last_Group+AnyOfOrNone(all) {
#            action= LockGroup(group=2);
#        };





        interpret F25+AnyOfOrNone(all) {
            repeat= True;
            action= SetPtrDflt(affect=button,button=1);
        };
        interpret F26+AnyOfOrNone(all) {
            repeat= True;
            action= SetPtrDflt(affect=button,button=2);
        };
        interpret F27+AnyOfOrNone(all) {
            repeat= True;
            action= MovePtr(x=-1,y=-1);
        };
        interpret F29+AnyOfOrNone(all) {
            repeat= True;
            action= MovePtr(x=+1,y=-1);
        };
        interpret F31+AnyOfOrNone(all) {
            repeat= True;
            action= PtrBtn(button=default);
        };
        interpret F33+AnyOfOrNone(all) {
            repeat= True;
            action= MovePtr(x=-1,y=+1);
        };
        interpret F35+AnyOfOrNone(all) {
            repeat= True;
            action= MovePtr(x=+1,y=+1);
        };
#        interpret Pointer_Button_Dflt+AnyOfOrNone(all) {
#            action= PtrBtn(button=default);
#        };
#        interpret Pointer_Button1+AnyOfOrNone(all) {
#            action= PtrBtn(button=1);
#        };
#        interpret Pointer_Button2+AnyOfOrNone(all) {
#            action= PtrBtn(button=2);
#        };
#        interpret Pointer_Button3+AnyOfOrNone(all) {
#            action= PtrBtn(button=3);
#        };
#        interpret Pointer_DblClick_Dflt+AnyOfOrNone(all) {
#            action= PtrBtn(button=default,count=2);
#        };
#        interpret Pointer_DblClick1+AnyOfOrNone(all) {
#            action= PtrBtn(button=1,count=2);
#        };
#        interpret Pointer_DblClick2+AnyOfOrNone(all) {
#            action= PtrBtn(button=2,count=2);
#        };
#        interpret Pointer_DblClick3+AnyOfOrNone(all) {
#            action= PtrBtn(button=3,count=2);
#        };
#        interpret Pointer_Drag_Dflt+AnyOfOrNone(all) {
#            action= LockPtrBtn(button=default,affect=both);
#        };
#        interpret Pointer_Drag1+AnyOfOrNone(all) {
#            action= LockPtrBtn(button=1,affect=both);
#        };
#        interpret Pointer_Drag2+AnyOfOrNone(all) {
#            action= LockPtrBtn(button=2,affect=both);
#        };
#        interpret Pointer_Drag3+AnyOfOrNone(all) {
#            action= LockPtrBtn(button=3,affect=both);
#        };
#        interpret Pointer_EnableKeys+AnyOfOrNone(all) {
#            action= LockControls(controls=MouseKeys);
#        };
#        interpret Pointer_Accelerate+AnyOfOrNone(all) {
#            action= LockControls(controls=MouseKeysAccel);
#        };
#        interpret Pointer_DfltBtnNext+AnyOfOrNone(all) {
#            action= SetPtrDflt(affect=button,button=+1);
#        };
#        interpret Pointer_DfltBtnPrev+AnyOfOrNone(all) {
#            action= SetPtrDflt(affect=button,button=-1);
#        };
#        interpret AccessX_Enable+AnyOfOrNone(all) {
#            action= LockControls(controls=AccessXKeys);
#        };
#        interpret AccessX_Feedback_Enable+AnyOfOrNone(all) {
#            action= LockControls(controls=AccessXFeedback);
#        };
#        interpret RepeatKeys_Enable+AnyOfOrNone(all) {
#            action= LockControls(controls=RepeatKeys);
#        };
#        interpret SlowKeys_Enable+AnyOfOrNone(all) {
#            action= LockControls(controls=SlowKeys);
#        };
#        interpret BounceKeys_Enable+AnyOfOrNone(all) {
#            action= LockControls(controls=BounceKeys);
#        };
#        interpret StickyKeys_Enable+AnyOfOrNone(all) {
#            action= LockControls(controls=StickyKeys);
#        };
#        interpret MouseKeys_Enable+AnyOfOrNone(all) {
#            action= LockControls(controls=MouseKeys);
#        };
#        interpret MouseKeys_Accel_Enable+AnyOfOrNone(all) {
#            action= LockControls(controls=MouseKeysAccel);
#        };
#        interpret Overlay1_Enable+AnyOfOrNone(all) {
#            action= LockControls(controls=Overlay1);
#        };
#        interpret Overlay2_Enable+AnyOfOrNone(all) {
#            action= LockControls(controls=Overlay2);
#        };
#        interpret AudibleBell_Enable+AnyOfOrNone(all) {
#            action= LockControls(controls=AudibleBell);
#        };
#        interpret Terminate_Server+AnyOfOrNone(all) {
#            action= Terminate();
#        };

        interpret Super_L+AnyOfOrNone(all) {
            action= SetMods(modifiers=Super,clearLocks);
        };
        interpret Super_R+AnyOfOrNone(all) {
            action= SetMods(modifiers=Super,clearLocks);
        };
        interpret Hyper_L+AnyOfOrNone(all) {
            action= SetMods(modifiers=Hyper,clearLocks);
        };
    #    interpret Hyper_R+AnyOfOrNone(all) {
    #        action= SetMods(modifiers=Hyper,clearLocks);
    #    };
        interpret Shift_L+AnyOfOrNone(all) {
            action= SetMods(modifiers=Shift,clearLocks);
        };
        interpret XF86Switch_VT_1+AnyOfOrNone(all) {
            repeat= True;
            action= SwitchScreen(screen=1,!same);
        };
        interpret XF86Switch_VT_2+AnyOfOrNone(all) {
            repeat= True;
            action= SwitchScreen(screen=2,!same);
        };
        interpret XF86Switch_VT_3+AnyOfOrNone(all) {
            repeat= True;
            action= SwitchScreen(screen=3,!same);
        };
        interpret XF86Switch_VT_4+AnyOfOrNone(all) {
            repeat= True;
            action= SwitchScreen(screen=4,!same);
        };
        interpret XF86Switch_VT_5+AnyOfOrNone(all) {
            repeat= True;
            action= SwitchScreen(screen=5,!same);
        };
        interpret XF86Switch_VT_6+AnyOfOrNone(all) {
            repeat= True;
            action= SwitchScreen(screen=6,!same);
        };
        interpret XF86Switch_VT_7+AnyOfOrNone(all) {
            repeat= True;
            action= SwitchScreen(screen=7,!same);
        };
        interpret XF86Switch_VT_8+AnyOfOrNone(all) {
            repeat= True;
            action= SwitchScreen(screen=8,!same);
        };
        interpret XF86Switch_VT_9+AnyOfOrNone(all) {
            repeat= True;
            action= SwitchScreen(screen=9,!same);
        };
        interpret XF86Switch_VT_10+AnyOfOrNone(all) {
            repeat= True;
            action= SwitchScreen(screen=10,!same);
        };
        interpret XF86Switch_VT_11+AnyOfOrNone(all) {
            repeat= True;
            action= SwitchScreen(screen=11,!same);
        };
        interpret XF86Switch_VT_12+AnyOfOrNone(all) {
            repeat= True;
            action= SwitchScreen(screen=12,!same);
        };
        interpret XF86LogGrabInfo+AnyOfOrNone(all) {
            repeat= True;
            action= Private(type=0x86,data[0]=0x50,data[1]=0x72,data[2]=0x47,data[3]=0x72,data[4]=0x62,data[5]=0x73,data[6]=0x00);
        };
        interpret XF86LogWindowTree+AnyOfOrNone(all) {
            repeat= True;
            action= Private(type=0x86,data[0]=0x50,data[1]=0x72,data[2]=0x57,data[3]=0x69,data[4]=0x6e,data[5]=0x73,data[6]=0x00);
        };
        interpret XF86Next_VMode+AnyOfOrNone(all) {
            repeat= True;
            action= Private(type=0x86,data[0]=0x2b,data[1]=0x56,data[2]=0x4d,data[3]=0x6f,data[4]=0x64,data[5]=0x65,data[6]=0x00);
        };
        interpret XF86Prev_VMode+AnyOfOrNone(all) {
            repeat= True;
            action= Private(type=0x86,data[0]=0x2d,data[1]=0x56,data[2]=0x4d,data[3]=0x6f,data[4]=0x64,data[5]=0x65,data[6]=0x00);
        };


        interpret ISO_Level5_Shift+AnyOfOrNone(all) {
            action= SetMods(modifiers=Meta,clearLocks);
        };

        interpret Any+AnyOf(all) {
            action= SetMods(modifiers=modMapMods,clearLocks);
        };


#         interpret ISO_Level5_Latch+AnyOfOrNone(all) {
#             action= LatchMods(modifiers=Meta,clearLocks,latchToLock);
#        };
        #interpret ISO_Level5_Lock+AnyOfOrNone(all) {
        #    action= LockMods(modifiers=Meta);
        #};

        #interpret Caps_Lock+AnyOfOrNone(all) {
        #    action= LockMods(modifiers=Lock);
        #};
        #interpret Any+Exactly(Lock) {
        #    action= LockMods(modifiers=Lock);
        #};
#        group 2 = AltGr;
#        group 3 = AltGr;
#        group 4 = AltGr;
#        indicator "Caps Lock" {
#            !allowExplicit;
#            whichModState= locked;
#            modifiers= Lock;
#        };
#        indicator "Num Lock" {
#            !allowExplicit;
#            whichModState= locked;
#            modifiers= NumLock;
#        };
#        indicator "Scroll Lock" {
#            whichModState= locked;
#            modifiers= ScrollLock;
#        };
#        indicator "Shift Lock" {
#            !allowExplicit;
#            whichModState= locked;
#            modifiers= Shift;
#        };
#        indicator "Group 2" {
#            !allowExplicit;
#            groups= 0xfe;
#        };
#        indicator "Mouse Keys" {
#            indicatorDrivesKeyboard;
#            controls= mouseKeys;
#        };
    };
    
    xkb_types "complete" {
    
        virtual_modifiers NumLock,Alt,LevelThree,LAlt,RAlt,RControl,LControl,ScrollLock,LevelFive,AltGr,Meta,Super,Hyper;
    
        type "ONE_LEVEL" {
            modifiers= none;
            level_name[Level1]= "Any";
        };
        type "TWO_LEVEL" {
            modifiers= Shift;
            map[Shift]= Level2;
            level_name[Level1]= "Base";
            level_name[Level2]= "Shift";
        };
        type "ALPHABETIC" {
            modifiers= Shift+Lock;
            map[Shift]= Level2;
            map[Lock]= Level2;
            level_name[Level1]= "Base";
            level_name[Level2]= "Caps";
        };
        type "SHIFT+ALT" {
            modifiers= Shift+Alt;
            map[Shift+Alt]= Level2;
            level_name[Level1]= "Base";
            level_name[Level2]= "Shift+Alt";
        };
        type "CTRL+ALT" {
            modifiers= Shift+Control+Alt+LevelThree;
            map[Shift]= Level2;
            preserve[Shift]= Shift;
            map[LevelThree]= Level3;
            map[Shift+LevelThree]= Level4;
            preserve[Shift+LevelThree]= Shift;
            map[Control+Alt]= Level5;
            level_name[Level1]= "Base";
            level_name[Level2]= "Shift";
            level_name[Level3]= "Alt Base";
            level_name[Level4]= "Shift Alt";
            level_name[Level5]= "Ctrl+Alt";
        };
        type "FULL_LEVEL" {
            modifiers= Shift+Meta+LevelThree+LevelFive+Mod4;
            map[Shift]= Level2;
            map[LevelThree]= Level3;
            map[Meta]= Level4;
            map[Mod4]=Level5;
            map[LevelFive]=Level6;
            level_name[Level1]= "Base";
            level_name[Level2]= "Shift";
            level_name[Level3]= "Alt Base";
            level_name[Level4]= "Shift Alt";
            level_name[Level5]= "Mod3";
            level_name[Level6]= "ModX";
        };
        type "KEYPAD" {
            modifiers= Shift+NumLock;
            map[Shift]= Level2;
            map[NumLock]= Level2;
            level_name[Level1]= "Base";
            level_name[Level2]= "Number";
        };
    };
    xkb_symbols "pc+us(colemak)+inet(evdev)" {
    
        name[group1]="English (Colemak)";
    
        # Function Keys Row
        key  <ESC> {[Escape]};
        key <FK01> {type="CTRL+ALT", symbols= [              F1,              F1,              F1,              F1, XF86Switch_VT_1 ]};
        key <FK02> {type="CTRL+ALT", symbols= [              F2,              F2,              F2,              F2, XF86Switch_VT_2 ]};
        key <FK03> {type="CTRL+ALT", symbols= [              F3,              F3,              F3,              F3, XF86Switch_VT_3 ]};
        key <FK04> {type="CTRL+ALT", symbols= [              F4,              F4,              F4,              F4, XF86Switch_VT_4 ]};
        key <FK05> {type="CTRL+ALT", symbols= [              F5,              F5,              F5,              F5, XF86Switch_VT_5 ]};
        key <FK06> {type="CTRL+ALT", symbols= [              F6,              F6,              F6,              F6, XF86Switch_VT_6 ]};
        key <FK07> {type="CTRL+ALT", symbols= [              F7,              F7,              F7,              F7, XF86Switch_VT_7 ]};
        key <FK08> {type="CTRL+ALT", symbols= [              F8,              F8,              F8,              F8, XF86Switch_VT_8 ]};
        key <FK09> {type="CTRL+ALT", symbols= [              F9,              F9,              F9,              F9, XF86Switch_VT_9 ]};
        key <FK10> {type="CTRL+ALT", symbols= [             F10,             F10,             F10,             F10, XF86Switch_VT_10 ]};
        key <FK11> {type="CTRL+ALT", symbols= [             F11,             F11,             F11,             F11, XF86Switch_VT_11 ]};
        key <FK12> {type="CTRL+ALT", symbols= [             F12,             F12,             F12,             F12, XF86Switch_VT_12 ]};
        key <HOME> {[Home]};
        key  <END> {[End]};
        key  <INS> {[Insert]};
        key <DELE> {[Delete]};
   
        # Numbers Row 
        key  <TLDE> {type="FULL_LEVEL", symbols= [grave, asciitilde, dead_tilde, asciitilde ]};
        key  <AE01> {[period]};
        key  <AE02> {[2]};
        key  <AE03> {[3]};
        key  <AE04> {[4]};
        key  <AE05> {[5]};
        key  <AE06> {[6]};
        key  <AE07> {[7]};
        key  <AE08> {[8]};
        key  <AE09> {[9]};
        key  <AE10> {[0]};
        key  <AE11> {[less]};
        key  <AE12> {[Tab]};
        key  <BKSP> {[apostrophe]};
    
        # Top Alphabetic Row 
        key <TAB>  {type="FULL_LEVEL", symbols= [               q,               Q,            asciicircum,     asciicircum ]};
        key <AD01> {type="FULL_LEVEL", symbols=  [               w,               W,               NoSymbol,               8, NoSymbol, NoSymbol]};
        key <AD02> {type="FULL_LEVEL",symbols= [               f,               F,                  slash,               6, backslash, bracketleft ]};
        key <AD03> {type="FULL_LEVEL", symbols= [                p,              P,                 exclam,               4,            bar, bracketright ]};
        key <AD04> {type="FULL_LEVEL", symbols= [               g,               G,            asciicircum,     asciicircum ]};
        key <AD05> {[NoSymbol]};
        key <AD06> {[NoSymbol]};
        key <AD07> {type="FULL_LEVEL", symbols= [               j,               J,        NoSymbol,        NoSymbol ]};
        key <AD08> {type="FULL_LEVEL", symbols= [             l,               L,      numbersign,        numbersign, NoSymbol, NoSymbol]};

        key <AD09> {type="FULL_LEVEL",   symbols= [             u,               U,      equal,       equal, asciitilde, u ]};

        key <AD10> {type="FULL_LEVEL", symbols= [               y,               Y,             dollar,             dollar, EuroSign, y ]};
        key <AD11> {type="FULL_LEVEL", symbols= [           colon,       semicolon,          ampersand,          ampersand ]};
        key <AD12> {[NoSymbol]};
    
        # Middle Alphabetic ("Home") Row
        key <CAPS> {type="FULL_LEVEL", symbols= [               a,               A,              at,         NoSymbol, at, less]};
        key <AC01> {type="FULL_LEVEL", symbols= [           r,               R,        question,                2, question, greater ]};
        key <AC02> {type="FULL_LEVEL", symbols= [               s,               S,               BackSpace,               1, NoSymbol, parenleft ]};
        key <AC03> {type="FULL_LEVEL", symbols= [               t,               T,              underscore,               0, NoSymbol, parenright ]};
        key <AC04> {type="FULL_LEVEL",    symbols= [               d,               D,         percent,          percent, percent ]};
        key <AC05> {[NoSymbol]};
        key <AC06> {[NoSymbol]};
        key <AC07> {type="FULL_LEVEL", symbols= [               h,               H,            Left,        NoSymbol]};
        key <AC08> {type="FULL_LEVEL", symbols= [               n,               N,            Down,            minus, NoSymbol, braceleft]};
        key <AC09> {type="FULL_LEVEL", symbols= [               e,               E,              Up,              plus, NoSymbol,  braceright]};
        key <AC10> {type="FULL_LEVEL", symbols= [               i,               I,           Right,           slash ]};
        key <AC11> {type="FULL_LEVEL", symbols= [               o,               O,        asterisk,        asterisk ]};
        key <AC12> {[Hyper_R]};


        # Return Key
        key <RTRN> {[Return]};
        key <> {[Return]};
 
        # Bottom Alphabetic Row
        key <LFSH> {[Control_L]};
        key <LSGT> {type="FULL_LEVEL",    symbols= [               z,               Z,               greater,                9 ]};
        key <AB01> {type="FULL_LEVEL",    symbols= [               x,               X,               NoSymbol,               7 ]};
        key <AB02> {type="FULL_LEVEL",    symbols= [               c,               C,               ampersand,               5 ]};
        key <AB03> {type="FULL_LEVEL",    symbols= [               v,               V,                  minus,               3, NoSymbol, NoSymbol ]};
        key <AB04> {type="FULL_LEVEL", symbols= [               b,               B,               NoSymbol,        NoSymbol ]};
        key <AB05> {[NoSymbol]};
        key <AB06> {[NoSymbol]};
        key <AB07> {type="FULL_LEVEL",   symbols= [               k,               K,               quotedbl,        quotedbl, grave]};
        key <AB08> {type="FULL_LEVEL",    symbols= [             m,                 M,                question,            plus, NoSymbol, bracketleft]};
        key <AB09> {type="FULL_LEVEL", symbols= [           comma,      underscore,         NoSymbol,        NoSymbol, NoSymbol, bracketright ]};
        key <AB10> {[Meta_L]};
        key <RTSH> {[Control_R]};

        # Modifiers Row
        key <I151> {[XF86WakeUp]};
        key <LCTL> {[Super_L]};
        key <LWIN> {[Super_L]};
        key <LALT> {[ISO_Level5_Shift]};

        key <SPCE> {[Hyper_L]};
        key <RALT> {[ISO_Level3_Shift]};
        key <PRSC> {[Super_R]};
        key <RCTL> {[Super_R]};

        # Navigation Keys Cluster 
        key <PGUP> {[           Prior ] };
        key <PGDN> {[            Next ] };
        key   <UP> {[              Up ] };
        key <LEFT> {[            Left ] };
        key <RGHT> {[           Right ] };
        key <DOWN> {[            Down ] };


        # Remainder
        key <NMLK> {[Num_Lock]};
        key <SCLK> {[Scroll_Lock]};
    
        key <LVL3> {[NoSymbol]};

        key <KPDV> {type="CTRL+ALT", symbols= [       KP_Divide,       KP_Divide,       KP_Divide,       KP_Divide,      XF86Ungrab ]};
        key <RWIN> {[NoSymbol]};


        key <LNFD> {         [        Linefeed ] };


        key <MUTE> {         [   XF86AudioMute ] };
        key <VOL-> {         [ XF86AudioLowerVolume ] };
        key <VOL+> {         [ XF86AudioRaiseVolume ] };
        key <POWR> {         [    XF86PowerOff ] };
        key <KPEQ> {         [        KP_Equal ] };
        key <I126> {         [       plusminus ] };
        key <PAUS> {[NoSymbol]};
        key <I128> {         [     XF86LaunchA ] };
        key <I129> {         [      KP_Decimal,      KP_Decimal ] };
        key <HNGL> {         [          Hangul ] };
        key <HJCV> {         [    Hangul_Hanja ] };
        key <COMP> {         [            Menu ] };
        key <STOP> {         [          Cancel ] };
        key <AGAI> {         [            Redo ] };
        key <PROP> {         [        SunProps ] };
        key <UNDO> {         [            Undo ] };
        key <FRNT> {         [        SunFront ] };
        key <COPY> {         [        XF86Copy ] };
        key <OPEN> {         [        XF86Open ] };
        key <PAST> {         [       XF86Paste ] };
        key <FIND> {         [            Find ] };
        key  <CUT> {         [         XF86Cut ] };
        key <HELP> {         [            Help ] };
        key <I147> {         [      XF86MenuKB ] };
        key <I148> {         [  XF86Calculator ] };
        key <I150> {         [       XF86Sleep ] };
        key <I152> {         [    XF86Explorer ] };
        key <I153> {         [        XF86Send ] };
        key <I155> {         [        XF86Xfer ] };
        key <I156> {         [     XF86Launch1 ] };
        key <I157> {         [     XF86Launch2 ] };
        key <I158> {         [         XF86WWW ] };
        key <I159> {         [         XF86DOS ] };
        key <I160> {         [ XF86ScreenSaver ] };
        key <I161> {         [ XF86RotateWindows ] };
        key <I162> {         [    XF86TaskPane ] };
        key <I163> {         [        XF86Mail ] };
        key <I164> {         [   XF86Favorites ] };
        modifier_map Mod3 { <AC12> };
        key <I165> {         [  XF86MyComputer ] };
        key <I166> {         [        XF86Back ] };
        key <I167> {         [     XF86Forward ] };
        key <I169> {         [       XF86Eject ] };
        key <I170> {         [       XF86Eject,       XF86Eject ] };
        key <I171> {         [   XF86AudioNext ] };
        key <I172> {         [   XF86AudioPlay,  XF86AudioPause ] };
        key <I173> {         [   XF86AudioPrev ] };
        key <I174> {         [   XF86AudioStop,       XF86Eject ] };
        key <I175> {         [ XF86AudioRecord ] };
        key <I176> {         [ XF86AudioRewind ] };
        key <I177> {         [       XF86Phone ] };
        key <I179> {         [       XF86Tools ] };
        key <I180> {         [    XF86HomePage ] };
        key <I181> {         [      XF86Reload ] };
        key <I182> {         [       XF86Close ] };
        key <I185> {         [    XF86ScrollUp ] };
        key <I186> {         [  XF86ScrollDown ] };
        key <I187> {         [       parenleft ] };
        key <I188> {         [      parenright ] };
        key <I189> {         [         XF86New ] };
        key <I190> {         [            Redo ] };
        key <FK13> {         [       XF86Tools ] };
        key <FK14> {         [     XF86Launch5 ] };
        key <FK15> {         [     XF86Launch6 ] };
        key <FK16> {         [     XF86Launch7 ] };
        key <FK17> {         [     XF86Launch8 ] };
        key <FK18> {         [     XF86Launch9 ] };
        key <FK20> {         [ XF86AudioMicMute ] };
        key <FK21> {         [ XF86TouchpadToggle ] };
        key <FK22> {         [  XF86TouchpadOn ] };
        key <FK23> {         [ XF86TouchpadOff ] };
        key <MDSW> {         [     Mode_switch ] };
        key  <ALT> {         [        NoSymbol,           Alt_L ] };
        key <META> {         [        NoSymbol,          Meta_L ] };
#        key <META> {         [        NoSymbol] };
        key <SUPR> {         [        NoSymbol,         Super_L ] };
        key <HYPR> {         [        NoSymbol,         Hyper_L ] };
        key <I208> {         [   XF86AudioPlay ] };
        key <I209> {         [  XF86AudioPause ] };
        key <I210> {         [     XF86Launch3 ] };
        key <I211> {         [     XF86Launch4 ] };
        key <I212> {         [     XF86LaunchB ] };
        key <I213> {         [     XF86Suspend ] };
        key <I214> {         [       XF86Close ] };
        key <I215> {         [   XF86AudioPlay ] };
        key <I216> {         [ XF86AudioForward ] };
        key <I218> {         [           Print ] };
        key <I220> {         [      XF86WebCam ] };
        key <I223> {         [        XF86Mail ] };
        key <I224> {         [   XF86Messenger ] };
        key <I225> {         [      XF86Search ] };
        key <I226> {         [          XF86Go ] };
        key <I227> {         [     XF86Finance ] };
        key <I228> {         [        XF86Game ] };
        key <I229> {         [        XF86Shop ] };
        key <I231> {         [          Cancel ] };
        key <I232> {         [ XF86MonBrightnessDown ] };
        key <I233> {         [ XF86MonBrightnessUp ] };
        key <I234> {         [  XF86AudioMedia ] };
        key <I235> {         [     XF86Display ] };
        key <I236> {         [ XF86KbdLightOnOff ] };
        key <I237> {         [ XF86KbdBrightnessDown ] };
        key <I238> {         [ XF86KbdBrightnessUp ] };
        key <I239> {         [        XF86Send ] };
        key <I240> {         [       XF86Reply ] };
        key <I241> {         [ XF86MailForward ] };
        key <I242> {         [        XF86Save ] };
        key <I243> {         [   XF86Documents ] };
        key <I244> {         [     XF86Battery ] };
        key <I245> {         [   XF86Bluetooth ] };
        key <I246> {         [        XF86WLAN ] };
        key <I251> {         [        NoSymbol ] };
        key <I254> {         [        XF86WWAN ] };
        key <I255> {         [      XF86RFKill ] };
   

        #### NoSymbol Mappings
        key   <KPMU> {[NoSymbol]};
        key   <KP7> {[NoSymbol]};
        key   <KP8> {[NoSymbol]};
        key   <KP9> {[NoSymbol]};
        key   <KPSU> {[NoSymbol]};
        key   <KP4> {[NoSymbol]};
        key   <KP5> {[NoSymbol]};
        key   <KP6> {[NoSymbol]};
        key   <KPAD> {[NoSymbol]};
        key   <KP1> {[NoSymbol]};
        key   <KP2> {[NoSymbol]};
        key   <KP3> {[NoSymbol]};
        key   <KP0> {[NoSymbol]};
        key   <KPDL> {[NoSymbol]};
        key   <AB11> {[NoSymbol]};
        key   <KATA> {[Tab]};
        key   <HIRA> {[space]};
        key   <HENK> {[slash]};
        key   <HKTG> {[NoSymbol]};
        key   <MUHE> {[NoSymbol]};
        key   <JPCM> {[NoSymbol]};
        key   <KPEN> {[NoSymbol]};
        key   <I120> {[NoSymbol]};
        key   <AE13> {[NoSymbol]};
        key   <I149> {[NoSymbol]};
        key   <I154> {[NoSymbol]};
        key   <I168> {[NoSymbol]};
        key   <I178> {[NoSymbol]};
        key   <I183> {[NoSymbol]};
        key   <I184> {[NoSymbol]};
        key   <FK19> {[NoSymbol]};
        key   <FK24> {[NoSymbol]};
        key   <I217> {[NoSymbol]};
        key   <I219> {[NoSymbol]};
        key   <I221> {[NoSymbol]};
        key   <I222> {[NoSymbol]};
        key   <I230> {[NoSymbol]};
        key   <I247> {[NoSymbol]};
        key   <I248> {[NoSymbol]};
        key   <I249> {[NoSymbol]};
        key   <I250> {[NoSymbol]};
        key   <I252> {[NoSymbol]};
        key   <I253> {[NoSymbol]};
    
        ###### Modifier Maps:
        modifier_map Control { <LFSH> };
        modifier_map Control { <RTSH> };

        modifier_map Mod5 { <LALT> };
        modifier_map Mod5 { <RALT> };

        modifier_map Shift { <SPCE> };

        # unused compose
        modifier_map Mod4 { <PRSC> };
        modifier_map Mod4 { <LWIN> };

        # mod1 is the 'Alt' keysym
        modifier_map Mod1 { <LCTL> };
        modifier_map Mod1 { <RCTL> };

        # for numeric layer

        modifier_map Mod3 { <AC12> };
        modifier_map Lock { <AB10> };

    };

    xkb_geometry "common" {
        width = 290;
        height = 100;
        baseColor = "grey90";
        labelColor = "white";
    
        shape "NORM" { cornerRadius = 1, { [18, 18] }, { [2.5, 0], [15.5, 14] } };
        shape "BKSP" { cornerRadius = 1, { [37, 18] }, { [2.5, 0], [34.5, 14] } };
        shape "TABK" { cornerRadius = 1, { [27, 18] }, { [2.5, 0], [24.5, 14] } };

        shape "CAPS" { cornerRadius = 1, { [31, 18] }, { [1, 0], [30, 16] },
    				                   { [1, 0], [26, 16] },
    				                   { [2.5, 0], [24.5, 14] } };

        shape "LFSH" { cornerRadius = 1, { [24, 18] }, { [2.5, 0], [21.5, 14] } };
        shape "RTSH" { cornerRadius = 1, { [50, 18] }, { [2.5, 0], [46.5, 14] } };
        shape "SPCE" { cornerRadius = 1, { [94, 18] }, { [2.5, 0], [92, 14] } };
   
        shape "RTRN" { cornerRadius = 1, { [28, 0], [28, 37], [4, 37], [4, 18],
                                           [0, 18], [0, 0] },
                                         { [25.5, 0], [25.5, 33], [6.5, 33],
    				       [6.5, 14], [2.5, 14], [2.5, 0] } };
 
        key.gap = 1;
        key.color = "grey60";
 
        section "Alpha" {
          	left = 2;
          	top = 2;
          	key.gap = 1;
          	key.color = "grey60";
          	key.shape = "NORM";
          	row {
          	    top = 1;
          	    keys { {<AE00>, color="grey80"}, <AE01>, <AE02>, <AE03>, <AE04>,
          		   <AE05>, <AE06>, <AE07>, <AE08>, <AE09>,
          		   <AE10>, <AE11>, <AE12>, { <BKSP>, "BKSP", color="grey80"}
          	    };
          	};
          	row {
          	    top = 20;
          	    keys { { <TAB>, "TABK" },
          		   <AD01>, <AD02>, <AD03>, <AD04>,
                 {<AD05>, color="grey80"}, {<AD06>, color="grey80"},
                 <AD07>, <AD08>, <AD09>, <AD10>, 
          		   <AD11>, { <AD12>, color="grey80" }, { <LVL3>, "RTRN", color="grey80" }
          	    };
          	};
          	row {
          	    top = 39;
          	    keys { { <CAPS>, "CAPS" },
          		   <AC01>, <AC02>, <AC03>, <AC04>, 
                 {<AC05>, color="grey80"}, {<AC06>, color="grey80"},
                 <AC07>, <AC08>, <AC09>, <AC10>, 
          		   <AC11>, <AC12>
          	    };
          	};
          	row {
          	    top = 58;
          	    keys { { <LFSH>, "LFSH" }, <LSGT>,
          		   <AB01>, <AB02>, <AB03>, <AB04>, 
                 {<AB05>, color="grey80"}, {<AB06>, color="grey80"},
          		   <AB07>, <AB08>, <AB09>, <AB10>,
          		   { <RTSH>, "RTSH" }
          	    };
          	};
        };
     
        section "Control" {
          	left= 2;
          	top = 78;
          	key.shape = "NORM";
          	row {
          	    top = 1;
          	    keys { <FN>, {<LCTL>, "LFSH"}, <LALT>,
                 <LWIN>,
          		   { <SPCE>, "SPCE" }, <RALT>, <PRSC>, <RCTL>
          	    };
          	};
        };
  };
};
